// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"
)

import (
	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

var _PagingRequest_OrderBy_InLookup = map[Order]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on PagingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PagingRequestMultiError, or
// nil if none found.
func (m *PagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetQuery()) > 0 {

		{
			sorted_keys := make([]string, len(m.GetQuery()))
			i := 0
			for key := range m.GetQuery() {
				sorted_keys[i] = key
				i++
			}
			sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
			for _, key := range sorted_keys {
				val := m.GetQuery()[key]
				_ = val

				if utf8.RuneCountInString(key) < 1 {
					err := PagingRequestValidationError{
						field:  fmt.Sprintf("Query[%v]", key),
						reason: "value length must be at least 1 runes",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

				if utf8.RuneCountInString(val) < 1 {
					err := PagingRequestValidationError{
						field:  fmt.Sprintf("Query[%v]", key),
						reason: "value length must be at least 1 runes",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	if len(m.GetOrderBy()) > 0 {

		{
			sorted_keys := make([]string, len(m.GetOrderBy()))
			i := 0
			for key := range m.GetOrderBy() {
				sorted_keys[i] = key
				i++
			}
			sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
			for _, key := range sorted_keys {
				val := m.GetOrderBy()[key]
				_ = val

				if utf8.RuneCountInString(key) < 1 {
					err := PagingRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", key),
						reason: "value length must be at least 1 runes",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

				if _, ok := _PagingRequest_OrderBy_InLookup[val]; !ok {
					err := PagingRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", key),
						reason: "value must be in list [0 1]",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

				if _, ok := Order_name[int32(val)]; !ok {
					err := PagingRequestValidationError{
						field:  fmt.Sprintf("OrderBy[%v]", key),
						reason: "value must be one of the defined enum values",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	if m.Page != nil {

		if m.GetPage() < 1 {
			err := PagingRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if val := m.GetPageSize(); val < 1 || val > 1000 {
			err := PagingRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 1000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PagingRequestMultiError(errors)
	}

	return nil
}

// PagingRequestMultiError is an error wrapping multiple validation errors
// returned by PagingRequest.ValidateAll() if the designated constraints
// aren't met.
type PagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingRequestMultiError) AllErrors() []error { return m }

// PagingRequestValidationError is the validation error returned by
// PagingRequest.Validate if the designated constraints aren't met.
type PagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingRequestValidationError) ErrorName() string { return "PagingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingRequestValidationError{}

// Validate checks the field values on PagingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PagingResponseMultiError,
// or nil if none found.
func (m *PagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingResponseMultiError(errors)
	}

	return nil
}

// PagingResponseMultiError is an error wrapping multiple validation errors
// returned by PagingResponse.ValidateAll() if the designated constraints
// aren't met.
type PagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingResponseMultiError) AllErrors() []error { return m }

// PagingResponseValidationError is the validation error returned by
// PagingResponse.Validate if the designated constraints aren't met.
type PagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingResponseValidationError) ErrorName() string { return "PagingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingResponseValidationError{}

// Validate checks the field values on CommonCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonCreate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonCreateMultiError, or
// nil if none found.
func (m *CommonCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonCreateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonCreateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonCreateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonCreateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonCreateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonCreateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonCreateMultiError(errors)
	}

	return nil
}

// CommonCreateMultiError is an error wrapping multiple validation errors
// returned by CommonCreate.ValidateAll() if the designated constraints aren't met.
type CommonCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonCreateMultiError) AllErrors() []error { return m }

// CommonCreateValidationError is the validation error returned by
// CommonCreate.Validate if the designated constraints aren't met.
type CommonCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonCreateValidationError) ErrorName() string { return "CommonCreateValidationError" }

// Error satisfies the builtin error interface
func (e CommonCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonCreateValidationError{}

// Validate checks the field values on CommonUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonUpdateMultiError, or
// nil if none found.
func (m *CommonUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonUpdateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonUpdateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonUpdateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonUpdateMultiError(errors)
	}

	return nil
}

// CommonUpdateMultiError is an error wrapping multiple validation errors
// returned by CommonUpdate.ValidateAll() if the designated constraints aren't met.
type CommonUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonUpdateMultiError) AllErrors() []error { return m }

// CommonUpdateValidationError is the validation error returned by
// CommonUpdate.Validate if the designated constraints aren't met.
type CommonUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonUpdateValidationError) ErrorName() string { return "CommonUpdateValidationError" }

// Error satisfies the builtin error interface
func (e CommonUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonUpdateValidationError{}

// Validate checks the field values on CommonDeletesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonDeletesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonDeletesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonDeletesRequestMultiError, or nil if none found.
func (m *CommonDeletesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonDeletesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := CommonDeletesRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 26 {
			err := CommonDeletesRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value length must be 26 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if len(errors) > 0 {
		return CommonDeletesRequestMultiError(errors)
	}

	return nil
}

// CommonDeletesRequestMultiError is an error wrapping multiple validation
// errors returned by CommonDeletesRequest.ValidateAll() if the designated
// constraints aren't met.
type CommonDeletesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonDeletesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonDeletesRequestMultiError) AllErrors() []error { return m }

// CommonDeletesRequestValidationError is the validation error returned by
// CommonDeletesRequest.Validate if the designated constraints aren't met.
type CommonDeletesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonDeletesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonDeletesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonDeletesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonDeletesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonDeletesRequestValidationError) ErrorName() string {
	return "CommonDeletesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommonDeletesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonDeletesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonDeletesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonDeletesRequestValidationError{}

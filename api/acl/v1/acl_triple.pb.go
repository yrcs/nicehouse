// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v3.21.9
// source: v1/acl.proto

package v1

import (
	context "context"
)

import (
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"

	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"

	common1 "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"

	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

import (
	common "github.com/yrcs/nicehouse/third_party/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ACLClient is the client API for ACL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACLClient interface {
	ListRoles(ctx context.Context, in *common.PagingRequest, opts ...grpc_go.CallOption) (*common.PagingResponse, common1.ErrorWithAttachment)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc_go.CallOption) (*Role, common1.ErrorWithAttachment)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc_go.CallOption) (*common.CommonCreate, common1.ErrorWithAttachment)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc_go.CallOption) (*common.CommonUpdate, common1.ErrorWithAttachment)
	DeleteRoles(ctx context.Context, in *common.CommonDeletesRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common1.ErrorWithAttachment)
}

type aCLClient struct {
	cc *triple.TripleConn
}

type ACLClientImpl struct {
	ListRoles   func(ctx context.Context, in *common.PagingRequest) (*common.PagingResponse, error)
	GetRole     func(ctx context.Context, in *GetRoleRequest) (*Role, error)
	CreateRole  func(ctx context.Context, in *CreateRoleRequest) (*common.CommonCreate, error)
	UpdateRole  func(ctx context.Context, in *UpdateRoleRequest) (*common.CommonUpdate, error)
	DeleteRoles func(ctx context.Context, in *common.CommonDeletesRequest) (*emptypb.Empty, error)
}

func (c *ACLClientImpl) GetDubboStub(cc *triple.TripleConn) ACLClient {
	return NewACLClient(cc)
}

func (c *ACLClientImpl) XXX_InterfaceName() string {
	return "yrcs.nicehouse.api.acl.v1.ACL"
}

func NewACLClient(cc *triple.TripleConn) ACLClient {
	return &aCLClient{cc}
}

func (c *aCLClient) ListRoles(ctx context.Context, in *common.PagingRequest, opts ...grpc_go.CallOption) (*common.PagingResponse, common1.ErrorWithAttachment) {
	out := new(common.PagingResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ListRoles", in, out)
}

func (c *aCLClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc_go.CallOption) (*Role, common1.ErrorWithAttachment) {
	out := new(Role)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetRole", in, out)
}

func (c *aCLClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc_go.CallOption) (*common.CommonCreate, common1.ErrorWithAttachment) {
	out := new(common.CommonCreate)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateRole", in, out)
}

func (c *aCLClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc_go.CallOption) (*common.CommonUpdate, common1.ErrorWithAttachment) {
	out := new(common.CommonUpdate)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateRole", in, out)
}

func (c *aCLClient) DeleteRoles(ctx context.Context, in *common.CommonDeletesRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common1.ErrorWithAttachment) {
	out := new(emptypb.Empty)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteRoles", in, out)
}

// ACLServer is the server API for ACL service.
// All implementations must embed UnimplementedACLServer
// for forward compatibility
type ACLServer interface {
	ListRoles(context.Context, *common.PagingRequest) (*common.PagingResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	CreateRole(context.Context, *CreateRoleRequest) (*common.CommonCreate, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*common.CommonUpdate, error)
	DeleteRoles(context.Context, *common.CommonDeletesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedACLServer()
}

// UnimplementedACLServer must be embedded to have forward compatible implementations.
type UnimplementedACLServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedACLServer) ListRoles(context.Context, *common.PagingRequest) (*common.PagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedACLServer) GetRole(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedACLServer) CreateRole(context.Context, *CreateRoleRequest) (*common.CommonCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedACLServer) UpdateRole(context.Context, *UpdateRoleRequest) (*common.CommonUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedACLServer) DeleteRoles(context.Context, *common.CommonDeletesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoles not implemented")
}
func (s *UnimplementedACLServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedACLServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedACLServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ACL_ServiceDesc
}
func (s *UnimplementedACLServer) XXX_InterfaceName() string {
	return "yrcs.nicehouse.api.acl.v1.ACL"
}

func (UnimplementedACLServer) mustEmbedUnimplementedACLServer() {}

// UnsafeACLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACLServer will
// result in compilation errors.
type UnsafeACLServer interface {
	mustEmbedUnimplementedACLServer()
}

func RegisterACLServer(s grpc_go.ServiceRegistrar, srv ACLServer) {
	s.RegisterService(&ACL_ServiceDesc, srv)
}

func _ACL_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ListRoles", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetRole", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateRole", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateRole", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_DeleteRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.CommonDeletesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteRoles", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// ACL_ServiceDesc is the grpc_go.ServiceDesc for ACL service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACL_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "yrcs.nicehouse.api.acl.v1.ACL",
	HandlerType: (*ACLServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "ListRoles",
			Handler:    _ACL_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _ACL_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ACL_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _ACL_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRoles",
			Handler:    _ACL_DeleteRoles_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "v1/acl.proto",
}
